{"version":3,"sources":["components/Place/Place.css","containers/Hierarchy/Hierarchy.css","containers/Store/Store.css","components/Table/Table.css","components/Form/Form.css","components/Loader/Loader.css","App.css","components/Place/Place.js","components/Loader/Loader.js","containers/Hierarchy/Hierarchy.js","components/Table/Table.js","components/Form/Form.js","containers/Store/Store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","renderIcon","isRoot","isActive","activeClass","cls","push","style","transform","className","join","Place","props","place","parts","children","placeList","forEach","placeItem","indexOf","id","classes","isRootPlace","currentRoom","active","onClick","onPlaceClick","data","name","map","child","index","key","Loader","Ld","Hierarchy","renderRootItems","places","item","rootItemsId","title","container","this","loading","Component","Table","state","inventory","nextProps","setState","length","Fragment","isLastChild","count","delete","onDeleteClick","edit","onEditClick","isValid","touched","validateParam","param","Form","isValidName","isValidCount","toched","componentWillReceiveProps","editing","editItem","onChangeHandler","event","isName","target","value","clickAddHandler","onAddItem","resetState","clickEditHandler","onEditItem","onCancelClick","type","onChange","placeholder","min","disabled","cancel","Store","tableData","getAllChildrenId","result","deleteClickHandler","firebase","firestore","collection","doc","then","refresh","editClickHandler","addItemHandler","itemName","itemCount","preventDefault","filestore","set","editItemHandler","cancelClickHandler","inventoryItem","placeId","App","currentPlace","loadingPlaces","loadingInventory","onPlaceClickHandler","refreshHandler","get","response","docs","x","e","console","log","filter","element","part","React","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47cd787a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Place\":\"_2Ypwy5lUM0lAlLApB1wr_g\",\"active\":\"_3Uy8T-YqPrcGbmBLG1BmWA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Hierarchy\":\"NBV4ow8Di21cnK7pqGpK6\",\"container\":\"cN3lwAG6GD51j8dpZE16T\",\"title\":\"_2x0_WiznIe0lHd_mI4i3WS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Store\":\"_2RmjoY2vh6vp_ytcFzlqox\",\"container\":\"_25o_D1i-8fdeQpADuQfQnb\",\"title\":\"H0RAfKBEPnZYROP0N-HDm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"_3vKIR2iUPU2NwSyXnMn-wi\",\"delete\":\"_3COdHtlUHqqCvo1Nzsb5td\",\"edit\":\"_2DS_woGacRSW-gJLHJnbbK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"_2zwZfN0sDiM3e_5bw15CX8\",\"disabled\":\"_3qnrLtM0rpBibDRMjEwUVJ\",\"cancel\":\"_1vA1dHWqp9FA81fVSDXuja\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Ld\":\"SUwapYpPc4vp9l4kKSIaG\",\"Loader\":\"_34pxb3XgSd_HSC9dWJyDo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"_1o-FpbQrR11SDFN-G7O4U3\"};","import React from 'react'\r\nimport classes from './Place.css'\r\n\r\n\r\nconst Place = props => {\r\n\r\n    if (props.place.parts) {   //Если у текущего помещения есть дочерние\r\n\r\n        const children = []       \r\n\r\n        props.placeList.forEach(placeItem => {       // Находим все дочерние помещения и добавляем в массив\r\n            if (props.place.parts.indexOf(placeItem.id) !== -1) {\r\n                children.push(placeItem)\r\n            }\r\n        })\r\n\r\n        return (\r\n            <li className={classes.Place}>\r\n                <ul>\r\n                    {renderIcon(props.isRootPlace,  props.currentRoom === props.place, classes.active)}\r\n\r\n                    <span onClick={() => props.onPlaceClick(props.place)}>{props.place.data.name}</span>\r\n\r\n                    {children.map((child,index) =>          // Рендер дочерних комнат\r\n                        <Place\r\n                            key={index}\r\n                            onPlaceClick={props.onPlaceClick}\r\n                            place={child}\r\n                            isRootPlace={false}\r\n                            placeList={props.placeList}\r\n                            currentRoom={props.currentRoom}\r\n                        />)}\r\n\r\n                </ul>\r\n            </li>\r\n        )\r\n\r\n    } else {    // Если дочерних нет\r\n        return (<li className={classes.Place} >\r\n\r\n            {renderIcon(props.isRootPlace, props.currentRoom === props.place, classes.active)}\r\n\r\n            <span onClick={() => props.onPlaceClick(props.place)}>{props.place.data.name}</span>\r\n        </li>)\r\n    }\r\n}\r\n\r\nfunction renderIcon(isRoot, isActive, activeClass) {   // Рендер иконки слева от названия комнаты\r\n\r\n    const cls = [\"fa\"]              // Массив классов\r\n\r\n    if (isActive) {                 // Если комната активна\r\n        cls.push(activeClass)\r\n    }\r\n\r\n    let style = {}\r\n\r\n    if (isRoot) {               // Если комната корневая\r\n        cls.push(\"fa-home\")\r\n    } else {\r\n        cls.push(\"fa-level-up-alt\")\r\n        style = {\r\n            transform: \"rotate(90deg)\" \r\n        }\r\n    }\r\n\r\n    return (\r\n        <i className={cls.join(\" \")} style={style} />\r\n    )\r\n}\r\n\r\nexport default Place","import React from 'react'\r\nimport classes from \"./Loader.css\"\r\n\r\nconst Loader = () => {   //https://loading.io/\r\n    return (\r\n        <div className={classes.Loader}><div className={classes.Ld}>\r\n            <div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n        </div></div>\r\n    )\r\n}\r\n\r\n\r\nexport default Loader","import React, { Component } from 'react'\r\nimport classes from \"./Hierarchy.css\"\r\nimport Place from \"../../components/Place/Place\"\r\nimport Loader from \"../../components/Loader/Loader\"\r\n\r\nclass Hierarchy extends Component {\r\n\r\n    renderRootItems = places => {        // Рендер коневых помещений (main, production)\r\n\r\n        return places.map((item, index) => {\r\n            if (this.props.rootItemsId.indexOf(item.id) !== -1) {\r\n                return (<ul key={index}>\r\n                    <Place                                    //Компенент комнаты\r\n                        currentRoom={this.props.currentRoom} \r\n                        onPlaceClick={this.props.onPlaceClick}\r\n                        isRootPlace={true}\r\n                        place={item}\r\n                        placeList={places}\r\n                    />\r\n                </ul>)\r\n            } else {\r\n                return null\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Hierarchy}>\r\n                <div className={classes.title}>Структура компании</div>\r\n                <div className={classes.container}>\r\n                    {this.props.loading ? <Loader/> : this.renderRootItems(this.props.places)}        \r\n                                     {/* Loader - компонет загрузки */}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Hierarchy","import React, { Component } from 'react'\r\nimport classes from './Table.css'\r\n\r\nclass Table extends Component {\r\n\r\n    state = {\r\n        inventory: [] // Массив данных для таблицы для конкретной комнаты\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            inventory: nextProps.data\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.props.data.length === 0) {                // Если данных для отрисовки нет\r\n            return (<React.Fragment><hr/><h2>В комнате нет оборудования</h2><hr/></React.Fragment>)\r\n        } else {\r\n            return (\r\n                <table className={classes.Table}>\r\n                    {/* Заголовок таблицы */}\r\n                    <tr>\r\n                        <th>№</th>\r\n                        <th>Наименование</th>\r\n                        <th>Колличество</th>        \r\n                        {this.props.isLastChild ? <th></th> : null}  \r\n                    </tr>\r\n\r\n                    {/* Тело таблицы */}\r\n                    {this.props.data.map((item, index) => {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>{index + 1}.</td>\r\n                                <td>{item.name}</td> \r\n                                <td>{item.count}</td>\r\n                                {this.props.isLastChild   // Если у помещения нет дочерних комнат, то отрисовать столбец с кнопками\r\n                                    ?\r\n                                    <td><button className={classes.delete} onClick={() => this.props.onDeleteClick(index)}><i className={\"fa fa-trash-alt\"} /></button>\r\n                                        <button className={classes.edit} onClick={() => this.props.onEditClick(index)}><i className={\"fa fa-pencil-alt\"} /></button>\r\n                                    </td>\r\n                                    :\r\n                                    null\r\n                                }\r\n\r\n                            </tr>\r\n                        )\r\n                    })}\r\n\r\n                </table>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Table","import React, { Component } from 'react'\r\nimport classes from './Form.css'\r\n\r\n\r\nfunction isValid(touched, ...validateParam) {  // Функция валидации формы\r\n    let isValid = true\r\n    validateParam.forEach(param => {           // Если все параметры = true\r\n        isValid = isValid && param\r\n    })\r\n\r\n    return touched && isValid\r\n}\r\n\r\nclass Form extends Component {\r\n\r\n    state = {\r\n        name: null,          // Название\r\n        count: null,         // Колличество\r\n        isValidName: false,  // Корректное ли имя?\r\n        isValidCount: true,  // Корректное ли колличество?\r\n        toched: false        // Редактировалась ли форма?\r\n    }\r\n\r\n    componentWillReceiveProps = (nextProps) => {\r\n        if (nextProps.editing) {            // Если включен режим редактирования\r\n            this.setState({\r\n                name: nextProps.editItem.name,\r\n                count: nextProps.editItem.count,\r\n                isValidName: true,\r\n                isValidCount: true,\r\n                toched: true\r\n            })\r\n        }\r\n    }\r\n\r\n    onChangeHandler = (event, isName) => {      // Обработчик изменения значения в форме\r\n\r\n        if (isName) {       // Если меняется поле с названием\r\n            const name = event.target.value\r\n\r\n            this.setState({\r\n                name,\r\n                toched: true,\r\n                isValidName: !!name     //Если название не пустое\r\n            })\r\n        } else {              // Если меняется поле с колличеством\r\n            const count = event.target.value\r\n\r\n\r\n            this.setState({\r\n                count,\r\n                toched: true,\r\n                isValidCount: count >= 1\r\n            })\r\n        }\r\n    }\r\n\r\n    clickAddHandler = event => {        // Обработчик клика на кнопку \"добавить\"\r\n        this.props.onAddItem(event, this.state.name, this.state.count)\r\n\r\n        this.resetState()   // Сбросить стейт\r\n    }\r\n\r\n    clickEditHandler = event => {   // Обработчик клика на кнопку \"изменить\"\r\n        this.props.onEditItem(event, this.state.name, this.state.count)\r\n\r\n        this.resetState()\r\n    }\r\n\r\n    onCancelClick(event) {  // Обработчик клика на кнопку \"отмена\"\r\n        this.props.onCancelClick(event)\r\n\r\n        this.resetState()\r\n    }\r\n\r\n    resetState = () => {  // Сброс\r\n        this.setState({\r\n            name: null,\r\n            count: null,\r\n            isValidName: false,\r\n            isValidCount: true,\r\n            toched: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className={classes.Form}>\r\n                {/* Включен ли режим редактирования */}\r\n                {this.props.editing ? <h3>Редактирование:</h3> : <h3>Добавить оборудование:</h3>}\r\n                {/* Поле \"название\" */}\r\n                <label>\r\n                    Название:\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.name ? this.state.name : \"\"}\r\n                        onChange={event => this.onChangeHandler(event, true)}\r\n                    />\r\n\r\n                </label>\r\n                <br />\r\n                {/* Поле \"колличество\" */}\r\n                <label>\r\n                    Колличество:\r\n                    <input\r\n                        type=\"number\"\r\n                        value={this.state.count ? this.state.count : \"\"}\r\n                        placeholder={1}\r\n                        min={1}\r\n                        onChange={event => this.onChangeHandler(event, false)}\r\n                    />\r\n                </label>\r\n\r\n                <br />\r\n                {/* Кпопка \"добавить\"/\"изменить\" (в зависимости от режима) */}\r\n                <button\r\n                    className={isValid(this.state.toched, this.state.isValidName, this.state.isValidCount) ? null : classes.disabled}\r\n                    onClick={this.props.editing ? event => this.clickEditHandler(event) : event => this.clickAddHandler(event)}\r\n                    disabled={!isValid(this.state.toched, this.state.isValidName, this.state.isValidCount)}\r\n                >\r\n                    {this.props.editing ? \"Изменить\" : \"Добавить\"}\r\n                </button>\r\n                {/* Кнопка \"отмена\" */}\r\n                {this.props.editing ?\r\n                    <button className={classes.cancel} onClick={event => this.onCancelClick(event)}>\r\n                        Отмена\r\n                </button> : null}\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Form","import React, { Component } from 'react'\r\nimport classes from \"./Store.css\"\r\nimport Table from '../../components/Table/Table'\r\nimport firebase from 'firebase'\r\nimport Form from '../../components/Form/Form'\r\n\r\nclass Store extends Component {\r\n\r\n\r\n    state = {\r\n        tableData: [],   // Данные для вывода в таблие\r\n        editing: false,  // Режим редактирования оборудования\r\n        editItem: null   // Редактируемый элемент\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        if (nextProps.currentRoom) {  // Если выбрано помещение\r\n\r\n            const tableData = []\r\n\r\n            nextProps.inventory.forEach((inventoryItem) => {   // Ищем все оборудование которое хранится в этой комнате и в дочерних\r\n                if (this.getAllChildrenId(nextProps.currentRoom).indexOf(inventoryItem.placeId) !== -1) {\r\n                    tableData.push({\r\n                        name: inventoryItem.data.name,\r\n                        count: inventoryItem.data.count,\r\n                        id: inventoryItem.id\r\n                    })\r\n                }\r\n            })\r\n\r\n            this.setState({\r\n                tableData\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    getAllChildrenId = (place) => {  // Метод поиска дочерних комнатах. Возвращает массив ID текущей комнаты и всех дочерних\r\n\r\n        const places = this.props.places\r\n\r\n        const result = [place.id]  // ID текущей комнаты\r\n\r\n        if (!place.parts) {  // Если нет дочерних\r\n            return result\r\n        } else {        // если есть\r\n            places.forEach(item => {   \r\n                if (place.parts.indexOf(item.id) !== -1) {  // Если ID комнаты из массива parts совпадает с id дочерней комнаты\r\n                    result.push(...this.getAllChildrenId(item))  // Рекурсия\r\n                }\r\n            })\r\n        }\r\n        return result\r\n    }\r\n\r\n    deleteClickHandler = (index) => {    // Обработчик удаления комнаты в таблице. index - номер элемента\r\n\r\n        const id = this.state.tableData[index].id\r\n\r\n        if (id) {\r\n            firebase.firestore().collection(\"inventory\").doc(id).delete().then(() => {  // Удаление с сервера\r\n                this.props.refresh()            // Обновление \r\n            });\r\n        }\r\n    }\r\n\r\n    editClickHandler = (index) => {     // Обработчик нажатия на кнопку редактирования в таблице.\r\n        this.setState({             // Включение режима редактирования\r\n            editing: true,\r\n            editItem: this.state.tableData[index]\r\n        })\r\n\r\n    }\r\n\r\n    addItemHandler = (event, itemName, itemCount) => {  // Обработчик добавления комнаты\r\n        event.preventDefault()\r\n        let filestore = firebase.firestore();\r\n        filestore.collection(\"inventory\").doc().set({       // Добавление на сервер\r\n            name: itemName,\r\n            count: itemCount || 1,\r\n            place: filestore.collection(\"places\").doc(this.props.currentRoom.id)\r\n        }).then(() => {\r\n            this.props.refresh()\r\n        });\r\n    }\r\n\r\n    editItemHandler = (event, itemName, itemCount) => {  // Обработчик изменения комнаты\r\n        event.preventDefault()\r\n\r\n        let filestore = firebase.firestore();\r\n\r\n        filestore.collection(\"inventory\").doc(this.state.editItem.id).set({  // Изменения комнаты на сервере\r\n            name: itemName,\r\n            count: itemCount,\r\n            place: filestore.collection(\"places\").doc(this.props.currentRoom.id)\r\n        }).then(() => {\r\n            this.setState({   // Выключение режима редактирвания\r\n                editing: false,\r\n                editItem: null\r\n            })\r\n            this.props.refresh()\r\n        });\r\n    }\r\n\r\n    cancelClickHandler = event => {  // Обработка нажатия кнопки отмены\r\n        event.preventDefault()\r\n        this.setState({\r\n            editing: false,\r\n            editItem: null\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Store} >\r\n                <div className={classes.title}>Оборудование</div>\r\n                <div className={classes.container}>\r\n                    {this.props.currentRoom ?  // Если выбрано помещение\r\n                        this.props.currentRoom.parts ? // Если помещение имеет дочерние комнаты\r\n                            [\r\n                                <h2>{this.props.currentRoom.data.name}</h2>,\r\n                                <Table                              // Компенент таблицы\r\n                                    data={this.state.tableData}\r\n                                    onDeleteClick={this.deleteClickHandler}\r\n                                    isLastChild={false}\r\n                                />\r\n                            ] : // Если дочерних комнат нет\r\n                            [\r\n                                <h2>{this.props.currentRoom.data.name}</h2>,\r\n                                <Table\r\n                                    data={this.state.tableData}\r\n                                    onDeleteClick={this.deleteClickHandler}\r\n                                    onEditClick={this.editClickHandler}\r\n                                    isLastChild={true}\r\n                                />,\r\n                                <Form               // Компенент формы\r\n                                    editItem={this.state.editItem}\r\n                                    editing={this.state.editing}\r\n                                    onAddItem={this.addItemHandler}\r\n                                    onEditItem={this.editItemHandler}\r\n                                    onCancelClick={this.cancelClickHandler}\r\n                                />\r\n                            ] : // Если комната не выбрана\r\n                        <h2>Выберите комнату</h2>}\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Store","import React from 'react';\nimport classes from './App.css';\nimport Hierarchy from \"./containers/Hierarchy/Hierarchy\"\nimport Store from \"./containers/Store/Store\"\nimport firebase from \"firebase\"\n\nclass App extends React.Component {\n\n  state = {\n    currentPlace: null,                          // Текущая комната\n    rootItemsId: ['main', 'production'],         // ID корневых комнат\n    places: [],                                  // массив комнат, загруженный с сервера\n    inventory: [],                               // массив оборудования, загруженный с сервера\n    loadingPlaces: true,                         // Загрузились ли комнаты \n    loadingInventory: true                       // Загрузилось ли оборудование\n  }\n\n  componentDidMount() {       // Загрузка данных\n    firebase.firestore().collection(\"places\").get().then(response => {\n      let places = response.docs.map(x => {\n        try {\n          return {\n            id: x.id,\n            data: x.data(),\n            parts: x.data().parts && x.data().parts.map(part => part.id)\n          }\n\n        } catch (e){\n          console.log(e);\n          return null\n        }\n      })\n\n      this.setState({\n        places,\n        loadingPlaces: false\n      })\n    })\n\n    firebase.firestore().collection(\"inventory\").get().then(response => {\n      let inventory = response.docs.map(x => {\n        try {\n          return {\n            id: x.id,\n            data: x.data(),\n            placeId: x.data().place.id\n          }\n\n        } catch (e) {\n          console.log(e);\n          return null\n        }\n      })\n\n      this.setState({\n        inventory: inventory.filter(element => element !== null),\n        loadingInventory: false\n      })\n    });\n  }\n\n  onPlaceClickHandler = item => {     // Обработка клика по комнате\n    this.setState({\n      currentPlace: item\n    })\n  }\n\n  refreshHandler = () => {                      // Обновить данные с сервера \n    firebase.firestore().collection(\"inventory\").get().then(response => {\n      let inventory = response.docs.map(x => {\n        try {\n          return {\n            id: x.id,\n            data: x.data(),\n            placeId: x.data().place.id\n          }\n        } catch(e) { \n          console.log(e) \n          return null\n        }\n      })\n      this.setState({\n        inventory: inventory.filter(element => element !== null),\n        loadingInventory: false\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className={classes.App}>\n\n        <Hierarchy                                          // Окно вывода иерархии помещений\n          loading={this.state.loadingPlaces && this.state.loadingPlaces}\n          places={this.state.places}\n          rootItemsId={this.state.rootItemsId}\n          currentRoom={this.state.currentPlace}\n\n          onPlaceClick={this.onPlaceClickHandler}\n        />\n\n        <Store                                          // Окно вывода и редактирования оборудования\n          places={this.state.places}\n          inventory={this.state.inventory}\n          loading={this.state.loadingInventory}\n          currentRoom={this.state.currentPlace}\n\n          refresh={this.refreshHandler}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase'\n\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyD6DnGbVfdJlDJ_pEOUfDfTDJrA8j3lIs8\",\n  authDomain: \"dv-inventory.firebaseapp.com\",\n  databaseURL: \"https://dv-inventory.firebaseio.com\",\n  projectId: \"dv-inventory\",\n  storageBucket: \"dv-inventory.appspot.com\",\n  messagingSenderId: \"130062240176\",\n  appId: \"1:130062240176:web:ecbca5d29b37d25c6cee75\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\t\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}